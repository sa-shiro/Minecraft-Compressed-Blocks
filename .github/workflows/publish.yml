#file: noinspection SpellCheckingInspection
name: publish
run-name: ${{ github.ref_name }}

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  publish:
    strategy:
      matrix:
        java: [ 17 ]
        os: [ windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Read gradle.properties and set variables (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          while IFS='=' read -r key value; do
            # Skip comments and empty lines
            if [[ $key == \#* ]] || [[ -z $key ]]; then
              continue
            fi
            # Check if the value contains a pipe (is array)
            if [[ $value == *"|"* ]]; then
              value=$(echo "$value" | tr -d '[]' | tr -d ' ')
              IFS='|' read -ra array <<< "$value"
              value=$(IFS=$'\n'; echo "${array[*]}")
            fi
            echo "$key<<EOF" >> $GITHUB_ENV
            echo "$value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          done < gradle.properties

      - name: Read gradle.properties and set variables (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $properties = Get-Content -Path gradle.properties -Raw | ConvertFrom-StringData
          foreach ($key in $properties.Keys) {
            $value = $properties[$key]
            if ($key.StartsWith('#') -or [string]::IsNullOrEmpty($key)) {
              continue
            }
            if ($value.Contains('|')) {
              $value = $value.Trim('[]').Replace(' ', '')
              $array = $value.Split('|')
              $value = $array -join "`n"
            }
            "$key<<EOF" >> $env:GITHUB_ENV
            "$value" >> $env:GITHUB_ENV
            "EOF" >> $env:GITHUB_ENV
          }

      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew

      #- name: "Run gradle task: (forge) -> datagen"
      #  run: ./gradlew :forge:runData

      - name: "Run gradle task: (neoforge) -> datagen"
        run: ./gradlew :neoforge:runData

      - name: build
        run: ./gradlew build

      - name: capture build artifacts
        if: ${{ runner.os == 'Windows' && matrix.java == '17' }} # Only upload artifacts built from the latest java on one OS
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: |
            forge/build/libs/
            neoforge/build/libs/
            fabric/build/libs/

      - name: publish FORGE
        if: ${{ runner.os == 'Windows' }}
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{env.modrinth_id}}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          modrinth-featured: true
          modrinth-unfeature-mode: intersection

          curseforge-id: ${{env.curseforge_id}}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}

          files: forge/build/libs/!(*-@(dev|sources|javadoc)).jar

          name: "v${{env.version}} (${{env.minecraft_version}}) FORGE"
          version: "${{env.version}}"
          version-type: "${{env.version_type}}"
          changelog-file: changelog.md

          loaders: |
            forge
          game-versions: ${{env.minecraft_version_range}}

          java: ${{ matrix.java }}

          retry-attempts: 2
          retry-delay: 10000
          fail-mode: warn

      - name: publish NEOFORGE
        if: ${{ runner.os == 'Windows' }}
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{env.modrinth_id}}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          modrinth-featured: true
          modrinth-unfeature-mode: intersection

          curseforge-id: ${{env.curseforge_id}}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}

          files: neoforge/build/libs/!(*-@(dev|sources|javadoc)).jar

          name: "v${{env.version}} (${{env.minecraft_version}}) NEOFORGE"
          version: "${{env.version}}"
          version-type: "${{env.version_type}}"
          changelog-file: changelog.md

          loaders: |
            neoforge
          game-versions: ${{env.minecraft_version_range}}

          java: ${{ matrix.java }}

          retry-attempts: 2
          retry-delay: 10000
          fail-mode: warn

      - name: publish FABRIC
        if: ${{ runner.os == 'Windows' }}
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{env.modrinth_id}}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          modrinth-featured: true
          modrinth-unfeature-mode: intersection

          curseforge-id: ${{env.curseforge_id}}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}

          files: fabric/build/libs/!(*-@(dev|sources|javadoc)).jar

          name: "v${{env.version}} (${{env.minecraft_version}}) FABRIC"
          version: "${{env.version}}"
          version-type: "${{env.version_type}}"
          changelog-file: changelog.md

          loaders: |
            fabric
          game-versions: ${{env.minecraft_version_range}}

          java: ${{ matrix.java }}

          retry-attempts: 2
          retry-delay: 10000
          fail-mode: warn